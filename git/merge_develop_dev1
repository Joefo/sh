#!/bin/bash
GIT_GROUP_TWO='git@git.ipo.com:hf-dev-1'
LOCAL_REPO=$HOME/Dev/Data/repo
SOURCE_ROOT=$HOME/dev/bin/git
rmsg() { echo -e "\033[31;49m$*\033[0m"; }
gmsg() { echo -e "\033[32;49m$*\033[0m"; } 
PS3="请输入要merge的项目名: "

function do_merge {
    cd $LOCAL_REPO
    gmsg "chdir to $(pwd)"
    APP_NAME=${1:?"未输入项目名"}
    echo $SOURCE_ROOT;
    GIT_REPO=$GIT_GROUP_TWO/$APP_NAME
    gmsg "选择的项目为: $APP_NAME"

    if [[ ! -d $APP_NAME ]]; then
        gmsg "cloning $GIT_REPO"
        git clone $GIT_REPO 2>/dev/null
        [[ $? -ne 0 ]] && { rmsg "clone failed!"; return 1; }
        gmsg "clone done"
        cd $APP_NAME 
    else
        cd $APP_NAME 
        gmsg "clean up"
        git clean -df
        git reset --hard
        git checkout master
        gmsg "pull from origin master" 
        git pull
        [[ $? -ne 0 ]] && { rmsg "fetch from origin master failed"; return 1; }
    fi

    gmsg 'update submodules'
    git submodule init
    git submodule update
    git submodule foreach git checkout master
    git submodule foreach git pull
    [[ $? -eq 0 ]] && { gmsg 'update submodule success'; } || { rmsg 'update submodule failed'; return 1; }
    git commit -am 'update submodules'; 

    read -p '请输入要合并的分支名,默认为develop: ' MERGE_BRANCH
    [[ -z $MERGE_BRANCH ]] && { MERGE_BRANCH='develop'; }
    gmsg "start to merge $MERGE_BRANCH into master"
    git merge -m "merge origin/$MERGE_BRANCH into master" --no-ff origin/$MERGE_BRANCH
    [[ $? -ne 0 ]] && { rmsg "分支不存在:$MERGE_BRANCH"; return 1; }
    gmsg 'merge done'

    grep -r -q '<<<<<<< HEAD' .
    [[ $? -eq 0 ]] && { rmsg 'find conflict, resolved first.'; return 1; }  

    read -p '确认是否push, yes|no? ' PUSH_CHOICE
    if [[ $PUSH_CHOICE = 'yes' ]]; then
        gmsg 'ready to push now'
        git push origin HEAD
    else
        rmsg '选择不push代码'
    fi

    return 0
}

select GIT_APP in exit $(cat $SOURCE_ROOT/app_dev1.conf); do
    case $GIT_APP in 
        exit)
            gmsg 'bye'
            break
            ;;
        *)
            do_merge $GIT_APP
            cd $LOCAL_REPO
            gmsg "chdir to $(pwd)"

            [[ $? -ne 0 ]] && { rmsg "merge failed, exit now"; break; }
            ;;
    esac
done
